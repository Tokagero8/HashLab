languageComboBox.tooltip=Select application language
languagePane.text=Language
algorithmComboBox.tooltip=Select a hashing algorithm to be tested.\nThe hashing algorithm determines how data is distributed and accessed in the hash table.\nDifferent algorithms handle collisions and data distribution in various ways, which can significantly impact performance.
hashTableSizeField.promptText=Hash table size
hashTableSizeField.tooltip=Enter the size of the hash table.\nThis value determines the initial capacity of the hash table, which directly affects performance,\nparticularly in terms of collision handling and memory usage.\nPlease enter a positive integer greater than 0.\nA larger table size can reduce the number of collisions, improving efficiency, but may also use more memory.
chunkSizeField.promptText=Data chunk size
chunkSizeField.tooltip=Enter the size of the data chunk to be hashed.\nThis value specifies how many characters will be processed in each hashing operation.\nPlease enter a positive integer greater than 0.\nA larger chunk size means more data will be hashed at once, which can impact both performance and memory usage.
hashAlgorithmsPane.text=Hash algorithms
hashFunctionChoice.tooltip=Select at least one hash function to be used in the testing.\nHash functions are algorithms that map data of arbitrary size to fixed-size values.\nChoosing multiple functions will allow for a comparative analysis of their performance and collision resistance.
hashFunctionsPane.text=Hash functions
testOperationsPane.text=Test operations
testOperationsPane.tooltip=Select at least one operation to be performed during the efficiency test.\nAvailable operations include:\n- Put: Inserts data into the hash table, useful for assessing insertion performance and collision resolution.\n- Get: Retrieves data from the hash table, used to evaluate lookup speed and retrieval efficiency.\n- Delete: Removes data from the hash table, useful for testing the effectiveness of deletion processes and reorganization.
generateDataRadio.text=Generate data
generateDataRadio.tooltip=Select this option to generate synthetic data for performance testing.\nGenerated data will be used during the performance evaluation of hashing algorithms.
dataSizeField.promptText=Data size
dataSizeField.tooltip=Enter the size of the data to be generated for performance testing.\nThis value must be a non-negative integer (e.g., 0 or greater).\nNote: For some algorithms, such as Linear Probing, completely filling the hash table can lead to\nperformance degradation or failure to insert more elements.\nEnsure the selected data size does not entirely fill the hash table to avoid potential issues.
dataGenerationTimingSwitch.text=Generate data during test addition:
dataGenerationTimingSwitch.tooltip=Choose when to generate the data for the test.\nIf enabled, data will be generated when adding the test to the list.\nThis ensures that the same data is used every time the test is run, providing consistent results.\nIf disabled, data will be generated each time the test is executed, which may lead to different data for each run,\nallowing for a broader evaluation of algorithm performance under varying conditions.
generateDataPane.text=Data
dataGenerationPane.text=Data Generation Methods
uniformCheckBox.text=Uniform
uniformCheckBox.tooltip=Select this option to generate data with a uniform distribution from the ASCII character range (0 to 255).\nA uniform distribution ensures that each possible ASCII character has an equal probability of occurrence.\nThis type of data distribution is useful for evaluating how well the hashing algorithm handles evenly distributed\ninput values, providing insight into collision handling under idealized conditions.
generateUniformDataButton.text=Generate Sample Uniform Data
generateUniformDataButton.tooltip=Click this button to generate a sample dataset with a uniform distribution from the ASCII character range (0 to 255).\nThe generated data will be visualized on a chart, allowing you to observe the uniform distribution pattern.
uniformPane.text=Uniform
gaussianCheckBox.text=Gaussian
gaussianCheckBox.tooltip=Select this option to generate data with a Gaussian (normal) distribution.\nA Gaussian distribution is characterized by a bell-shaped curve, where most values are concentrated\naround the mean, with fewer values occurring further away.\nThis type of data distribution is useful for evaluating how well the hashing algorithm handles\ndata that follows a real-world, naturally occurring pattern with clusters of similar values.\nSpecify the mean and standard deviation to control the center and spread of the distribution.
meanField.promptText=Mean
meanField.tooltip=Enter the mean value for the Gaussian (normal) distribution.\nThe mean must be a floating-point number, representing the center of the distribution, where most data points will cluster.\nA higher mean will shift the distribution to higher values, while a lower mean will shift it to lower values.
deviationField.promptText=Deviation
deviationField.tooltip=Enter the standard deviation for the Gaussian (normal) distribution.\nThe standard deviation must be a positive floating-point number, which controls the spread of the distribution.\nA higher standard deviation results in data points being more widely spread out from the mean,\nwhile a lower value keeps the data points closer to the mean.
generateGaussianDataButton.text=Generate Sample Gaussian Data
generateGaussianDataButton.tooltip=Click this button to generate a sample dataset with a Gaussian (normal) distribution.\nThe generated data will be based on the specified mean and standard deviation, allowing you to visualize the distribution pattern on a chart.
gaussianPane.text=Gaussian
exponentialCheckBox.text=Exponential
exponentialCheckBox.tooltip=Select this option to generate data with an exponential distribution.\nAn exponential distribution is often used to model the time between independent events that occur at a constant average rate.\nThis type of data distribution is useful for evaluating the performance of hashing algorithms under\nconditions where data points have a higher probability of being close to the origin, but with a decreasing probability of larger values.\nSpecify the lambda (rate) value to control the spread and frequency of occurrences within the distribution.
lambdaField.promptText=Lambda
lambdaField.tooltip=Enter the lambda (rate) value for the exponential distribution.\nLambda must be a positive floating-point number, representing the rate of occurrences within the distribution.\nA higher lambda value results in more data points being clustered near the beginning of the distribution, indicating a higher rate of occurrence.
generateExponentialDataButton.text=Generate Sample Exponential Data
generateExponentialDataButton.tooltip=Click this button to generate a sample dataset with an exponential distribution.\nThe generated data will be based on the specified lambda (rate) value, and will be visualized on a chart to help you understand the distribution pattern.
exponentialPane.text=Exponential
fileChooserButton.text=Choose a file
fileChooserButton.tooltip=Click this button to open a file explorer window and select a file from which data will be loaded.\nOnly text-based file formats are supported (e.g., .txt, .csv).
loadDataRadio.text=Load from file
loadDataRadio.tooltip=Select this option to load data from an external file.\nBy choosing this option, you can use custom datasets stored in a file, which allows for more flexible testing scenarios.
dataLoadingTimingSwitch.text=Load data during test addition:
dataLoadingTimingSwitch.tooltip=Choose when to load the data from the file.\nIf enabled, the data will be loaded when adding the test to the list, ensuring that the\nsame data is used every time the test is run, providing consistent results.\nIf disabled, data will be loaded each time the test is executed, allowing for variability,\nwhich might be useful for evaluating performance under slightly different conditions each time.
dataSourcePane.text=Data source
benchmarkIterationsField.promptText=Benchmark iterations
benchmarkIterationsField.tooltip=Enter the number of iterations for the benchmark.\nThis value must be a positive integer greater than 0.\nThe benchmark calculates the factorial of 20 multiple times to gather reliable performance metrics.\nMore iterations result in more accurate benchmarking but take longer to complete.\nA recommended number of iterations is between 100 and 1000, depending on the desired balance between precision and test duration.
benchmarkThresholdField.promptText=Benchmark threshold
benchmarkThresholdField.tooltip=Enter the benchmark threshold value.\nMust be a positive floating-point number.\nIf the difference between successive iteration averages falls below this value, benchmarking will stop early.\nRecommended values are between 0.001 and 0.01 for a good balance between precision and efficiency.\nEntering a negative number will result in the execution of all iterations.
benchmarkParamsPane.text=Benchmark parameters
testIterationsField.promptText=Test iterations
testIterationsField.tooltip=Enter the number of iterations for the performance test.\nThis value must be a positive integer greater than 0.\nThe test is repeated multiple times to ensure that the results are reliable and not influenced by transient system conditions.\nMore iterations generally yield more accurate results, but they also take longer to execute.\nA recommended number of iterations is between 50 and 500, depending on the desired balance between precision and the time taken for the test.
testThresholdField.promptText=Test Threshold
testThresholdField.tooltip=Enter the threshold for ending test iterations early.\nThis value must be a positive floating-point number.\nIf the difference between consecutive iteration averages falls below this threshold, testing will end early to save time.\nRecommended values are between 0.001 and 0.01 for a good balance between precision and efficiency.\nEntering a negative number will result in the execution of all iterations.
warmupIterationsField.promptText=Warmup iterations
warmupIterationsField.tooltip=Enter the number of warmup iterations.\nMust be a positive integer.\nWarmup iterations are used to stabilize the system and minimize the impact of JVM optimizations, ensuring more reliable test results.\nA recommended number is between 10 and 50 to properly prepare for performance testing.
additionalSettingsPane.text=Additional Settings
runTestButton.text=Run the selected tests
runTestButton.tooltip=Click this button to execute all the selected tests.\nThe tests configured with the specified parameters will run sequentially, and performance metrics will be collected for analysis.
addTestButton.text=Add a test
addTestButton.tooltip=Click this button to add a test with the currently configured parameters.\nThe test will be saved to the list and can be run later.
removeTestButton.text=Delete the selected tests
removeTestButton.tooltip=Click this button to delete the selected tests from the list.\nEnsure you have selected the tests you wish to remove, as this action cannot be undone.
exportSelectedTestsButton.text=Export Selected Tests
exportSelectedTestsButton.tooltip=Click this button to export the selected tests to a JSON file.\nThis allows you to save the test configurations for future use or share them with others.
importTestsButton.text=Import Tests
importTestsButton.tooltip=Click this button to import test configurations from a JSON file.\nThis allows you to load previously saved tests or configurations shared by others.
loadCSVFileButton.text=Load Results
loadCSVFileButton.tooltip=Click this button to load performance results from a CSV file.\nThis allows you to review and analyze results obtained previously in the testing environment.
testsListLabel.text=Tests list
testCheckListView.tooltip=This is the list of configured tests.\nYou can select multiple tests to run, delete, or export.\nDouble-click on a test to view its detailed configuration.